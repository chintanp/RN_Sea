# Temporal Analysis
# Find the variation in days
library(lubridate)
attach(RN_Sea_data_member_miles)
str(RN_Sea_data_member_miles)
sort(ReservationStartTime)
df_startTime <-
data.frame(parse_date_time(sort(ReservationStartTime),
c("Ymd HMS", "Ymd HM"),
tz = "America/Los_Angeles"))
ResStartTime = parse_date_time(sort(ReservationStartTime),
c("Ymd HMS", "Ymd HM"),
tz = "America/Los_Angeles")
i <- 1
date_counter <-
data.frame(ReservationDate = as.Date(character()), Count = integer())
day_counter <- 1
day_frequency <- 1
total_rows <- nrow(RN_Sea_data_member_miles)
dates = structure(integer(), class = "Date")
freq = c()
temp = function() {
while (i < 100) {
day_frequency <- 1
nexti <- i + 1
while (year(ResStartTime[i]) == year(ResStartTime[nexti]) &&
month(ResStartTime[i]) == month(ResStartTime[nexti]) &&
day(ResStartTime[i]) == day(ResStartTime[nexti])) {
# print("date at i: ")
# print(ResStartTime[i] )
# print("date at nexti: ")
# print(ResStartTime[nexti] )
day_frequency <- day_frequency + 1
if (nexti == total_rows) {
break
}
nexti <- nexti + 1
}
dates = c(dates, ResStartTime[i])
freq = c(freq, day_frequency)
i <- nexti + 1
day_counter <- day_counter + 1
}
}
temp()
debugSource('E:/Google Drive UW/C2Smart-ReachNow/code/RN_Sea/data_analysis/data_parsingR.R')
debugSource('E:/Google Drive UW/C2Smart-ReachNow/code/RN_Sea/data_analysis/data_parsingR.R')
c
# Inital Setup
rm(list = ls())
setwd("E:\\Google Drive UW\\C2Smart-ReachNow\\code\\RN_Sea\\data_analysis")
#install.packages("readxl")
#install.packages("dplyr")
#install.packages("rworldmap")
#install.packages("ggmap")
#install.packages(c("mapproj", "maps"))
#install.packages("lubridate")
library(readxl)
library(dplyr)
library(maps)
library(mapproj)
# Read the trip data from the excel file
# Total ReachNow i3 data for USA
RN_US_data <- read_excel("i3_TRIP_DATA_REACHNOW_USA.xlsx")
# Read the map boundaries for Seattle
maps_data <-
read.csv("ReachNow_boundaries_Seattle_total.txt",
header = TRUE,
sep = "\t")
# Find the Seattle lat, long extremes
min_lat <- min(maps_data['latitude'])
min_long <- min(maps_data['longitude'])
max_lat = max(maps_data['latitude'])
max_long = max(maps_data['longitude'])
# Extract Seattle trips from USA trips
# Remove NAs
RN_US_data_nonNull <-
subset(RN_US_data, !RN_US_data$StartLocationLat == 'NA')
# Remove illegal trips and trips from other regions  !! Longitudes are working in reverse (?)
RN_Sea_data <-
subset(
RN_US_data_nonNull,
StartLocationLat >= min_lat &
EndLocationLat <= max_lat &
StartLocationLng <= min_long & EndLocationLng >= max_long
)
#Get Member trips
RN_Sea_data_member <- filter(RN_Sea_data, Type == 'M')
# Filter trips with non-zero miles travelled
RN_Sea_data_member_miles <-
filter(RN_Sea_data_member, MileageDriven > 0)
# Get start and end points
startPoints <-
data.frame(lat = RN_Sea_data_member_miles$StartLocationLat,
lon = RN_Sea_data_member_miles$StartLocationLng)
endPoints <-
data.frame(lat = RN_Sea_data_member_miles$EndLocationLat,
lon = RN_Sea_data_member_miles$EndLocationLng)
# Assimilate the trips and save to a file
RN_Sea_trips <-
data.frame(startPoints$lat,
startPoints$lon,
endPoints$lat,
endPoints$lon)
write.table(
RN_Sea_trips,
"RN_Sea_trips.txt",
sep = "\t",
row.names = FALSE,
quote = FALSE
)
# Temporal Analysis
# Find the variation in days
library(lubridate)
attach(RN_Sea_data_member_miles)
str(RN_Sea_data_member_miles)
sort(ReservationStartTime)
df_startTime <-
data.frame(parse_date_time(sort(ReservationStartTime),
c("Ymd HMS", "Ymd HM"),
tz = "America/Los_Angeles"))
ResStartTime = parse_date_time(sort(ReservationStartTime),
c("Ymd HMS", "Ymd HM"),
tz = "America/Los_Angeles")
i <- 1
date_counter <-
data.frame(ReservationDate = as.Date(character()), Count = integer())
day_counter <- 1
day_frequency <- 1
total_rows <- nrow(RN_Sea_data_member_miles)
dates = structure(integer(), class = "Date")
freq = c()
while (i < 500) {
day_frequency <- 1
nexti <- i + 1
while (year(ResStartTime[i]) == year(ResStartTime[nexti]) &&
month(ResStartTime[i]) == month(ResStartTime[nexti]) &&
day(ResStartTime[i]) == day(ResStartTime[nexti])) {
# print("date at i: ")
# print(ResStartTime[i] )
# print("date at nexti: ")
# print(ResStartTime[nexti] )
day_frequency <- day_frequency + 1
if (nexti == total_rows) {
break
}
nexti <- nexti + 1
}
dates = c(dates, ResStartTime[i])
freq = c(freq, day_frequency)
i <- nexti
day_counter <- day_counter + 1
}
# date_counter[1]
#
# i <- 1
#
# while (i < 6) {
#   browser()
#   print(i)
#   i = i + 1
# }
# # PLot the start and end points on the Seattle Map
# library(rworldmap)
# library(ggmap)
#
# Sea_map <- get_map(location = 'Seattle',
#                    maptype = "roadmap",
#                    zoom = 10)
# sea <- ggmap(RN_Sea_map)
# RN_Sea_startPoints <-
#   sea + geom_point(
#     data = startPoints,
#     aes(x = lon, y = lat),
#     color = "red",
#     size = 30,
#     alpha = 0.5
#   )
freq
dates
dates = structure(integer(), class = "POSIXct")
# Inital Setup
rm(list = ls())
setwd("E:\\Google Drive UW\\C2Smart-ReachNow\\code\\RN_Sea\\data_analysis")
#install.packages("readxl")
#install.packages("dplyr")
#install.packages("rworldmap")
#install.packages("ggmap")
#install.packages(c("mapproj", "maps"))
#install.packages("lubridate")
library(readxl)
library(dplyr)
library(maps)
library(mapproj)
# Read the trip data from the excel file
# Total ReachNow i3 data for USA
RN_US_data <- read_excel("i3_TRIP_DATA_REACHNOW_USA.xlsx")
# Read the map boundaries for Seattle
maps_data <-
read.csv("ReachNow_boundaries_Seattle_total.txt",
header = TRUE,
sep = "\t")
# Find the Seattle lat, long extremes
min_lat <- min(maps_data['latitude'])
min_long <- min(maps_data['longitude'])
max_lat = max(maps_data['latitude'])
max_long = max(maps_data['longitude'])
# Extract Seattle trips from USA trips
# Remove NAs
RN_US_data_nonNull <-
subset(RN_US_data, !RN_US_data$StartLocationLat == 'NA')
# Remove illegal trips and trips from other regions  !! Longitudes are working in reverse (?)
RN_Sea_data <-
subset(
RN_US_data_nonNull,
StartLocationLat >= min_lat &
EndLocationLat <= max_lat &
StartLocationLng <= min_long & EndLocationLng >= max_long
)
#Get Member trips
RN_Sea_data_member <- filter(RN_Sea_data, Type == 'M')
# Filter trips with non-zero miles travelled
RN_Sea_data_member_miles <-
filter(RN_Sea_data_member, MileageDriven > 0)
# Get start and end points
startPoints <-
data.frame(lat = RN_Sea_data_member_miles$StartLocationLat,
lon = RN_Sea_data_member_miles$StartLocationLng)
endPoints <-
data.frame(lat = RN_Sea_data_member_miles$EndLocationLat,
lon = RN_Sea_data_member_miles$EndLocationLng)
# Assimilate the trips and save to a file
RN_Sea_trips <-
data.frame(startPoints$lat,
startPoints$lon,
endPoints$lat,
endPoints$lon)
write.table(
RN_Sea_trips,
"RN_Sea_trips.txt",
sep = "\t",
row.names = FALSE,
quote = FALSE
)
# Temporal Analysis
# Find the variation in days
library(lubridate)
attach(RN_Sea_data_member_miles)
str(RN_Sea_data_member_miles)
sort(ReservationStartTime)
df_startTime <-
data.frame(parse_date_time(sort(ReservationStartTime),
c("Ymd HMS", "Ymd HM"),
tz = "America/Los_Angeles"))
ResStartTime = parse_date_time(sort(ReservationStartTime),
c("Ymd HMS", "Ymd HM"),
tz = "America/Los_Angeles")
i <- 1
date_counter <-
data.frame(ReservationDate = as.Date(character()), Count = integer())
day_counter <- 1
day_frequency <- 1
total_rows <- nrow(RN_Sea_data_member_miles)
dates = structure(integer(), class = "POSIXct")
freq = c()
while (i < 500) {
day_frequency <- 1
nexti <- i + 1
while (year(ResStartTime[i]) == year(ResStartTime[nexti]) &&
month(ResStartTime[i]) == month(ResStartTime[nexti]) &&
day(ResStartTime[i]) == day(ResStartTime[nexti])) {
# print("date at i: ")
# print(ResStartTime[i] )
# print("date at nexti: ")
# print(ResStartTime[nexti] )
day_frequency <- day_frequency + 1
if (nexti == total_rows) {
break
}
nexti <- nexti + 1
}
dates = c(dates, ResStartTime[i])
freq = c(freq, day_frequency)
i <- nexti
day_counter <- day_counter + 1
}
# date_counter[1]
#
# i <- 1
#
# while (i < 6) {
#   browser()
#   print(i)
#   i = i + 1
# }
# # PLot the start and end points on the Seattle Map
# library(rworldmap)
# library(ggmap)
#
# Sea_map <- get_map(location = 'Seattle',
#                    maptype = "roadmap",
#                    zoom = 10)
# sea <- ggmap(RN_Sea_map)
# RN_Sea_startPoints <-
#   sea + geom_point(
#     data = startPoints,
#     aes(x = lon, y = lat),
#     color = "red",
#     size = 30,
#     alpha = 0.5
#   )
dates
# Inital Setup
rm(list = ls())
setwd("E:\\Google Drive UW\\C2Smart-ReachNow\\code\\RN_Sea\\data_analysis")
#install.packages("readxl")
#install.packages("dplyr")
#install.packages("rworldmap")
#install.packages("ggmap")
#install.packages(c("mapproj", "maps"))
#install.packages("lubridate")
library(readxl)
library(dplyr)
library(maps)
library(mapproj)
# Read the trip data from the excel file
# Total ReachNow i3 data for USA
RN_US_data <- read_excel("i3_TRIP_DATA_REACHNOW_USA.xlsx")
# Read the map boundaries for Seattle
maps_data <-
read.csv("ReachNow_boundaries_Seattle_total.txt",
header = TRUE,
sep = "\t")
# Find the Seattle lat, long extremes
min_lat <- min(maps_data['latitude'])
min_long <- min(maps_data['longitude'])
max_lat = max(maps_data['latitude'])
max_long = max(maps_data['longitude'])
# Extract Seattle trips from USA trips
# Remove NAs
RN_US_data_nonNull <-
subset(RN_US_data, !RN_US_data$StartLocationLat == 'NA')
# Remove illegal trips and trips from other regions  !! Longitudes are working in reverse (?)
RN_Sea_data <-
subset(
RN_US_data_nonNull,
StartLocationLat >= min_lat &
EndLocationLat <= max_lat &
StartLocationLng <= min_long & EndLocationLng >= max_long
)
#Get Member trips
RN_Sea_data_member <- filter(RN_Sea_data, Type == 'M')
# Filter trips with non-zero miles travelled
RN_Sea_data_member_miles <-
filter(RN_Sea_data_member, MileageDriven > 0)
# Get start and end points
startPoints <-
data.frame(lat = RN_Sea_data_member_miles$StartLocationLat,
lon = RN_Sea_data_member_miles$StartLocationLng)
endPoints <-
data.frame(lat = RN_Sea_data_member_miles$EndLocationLat,
lon = RN_Sea_data_member_miles$EndLocationLng)
# Assimilate the trips and save to a file
RN_Sea_trips <-
data.frame(startPoints$lat,
startPoints$lon,
endPoints$lat,
endPoints$lon)
write.table(
RN_Sea_trips,
"RN_Sea_trips.txt",
sep = "\t",
row.names = FALSE,
quote = FALSE
)
# Temporal Analysis
# Find the variation in days
library(lubridate)
attach(RN_Sea_data_member_miles)
str(RN_Sea_data_member_miles)
sort(ReservationStartTime)
df_startTime <-
data.frame(parse_date_time(sort(ReservationStartTime),
c("Ymd HMS", "Ymd HM"),
tz = "America/Los_Angeles"))
ResStartTime = parse_date_time(sort(ReservationStartTime),
c("Ymd HMS", "Ymd HM"),
tz = "America/Los_Angeles")
i <- 1
date_counter <-
data.frame(ReservationDate = as.Date(character()), Count = integer())
day_counter <- 1
day_frequency <- 1
total_rows <- nrow(RN_Sea_data_member_miles)
dates = structure(integer(), class = "POSIXct")
freq = c()
while (i < total_rows) {
day_frequency <- 1
nexti <- i + 1
while (year(ResStartTime[i]) == year(ResStartTime[nexti]) &&
month(ResStartTime[i]) == month(ResStartTime[nexti]) &&
day(ResStartTime[i]) == day(ResStartTime[nexti])) {
# print("date at i: ")
# print(ResStartTime[i] )
# print("date at nexti: ")
# print(ResStartTime[nexti] )
day_frequency <- day_frequency + 1
if (nexti == total_rows) {
break
}
nexti <- nexti + 1
}
dates = c(dates, ResStartTime[i])
freq = c(freq, day_frequency)
i <- nexti
day_counter <- day_counter + 1
}
# date_counter[1]
#
# i <- 1
#
# while (i < 6) {
#   browser()
#   print(i)
#   i = i + 1
# }
# # PLot the start and end points on the Seattle Map
# library(rworldmap)
# library(ggmap)
#
# Sea_map <- get_map(location = 'Seattle',
#                    maptype = "roadmap",
#                    zoom = 10)
# sea <- ggmap(RN_Sea_map)
# RN_Sea_startPoints <-
#   sea + geom_point(
#     data = startPoints,
#     aes(x = lon, y = lat),
#     color = "red",
#     size = 30,
#     alpha = 0.5
#   )
dates
freq
date_counter <- data.frame(dates, freq)
View(date_counter)
plot(date_counter, type="l")
max(date_counter$freq)
plot(date_counter, type="b")
plot(date_counter, type="h")
average(date_counter$freq)
mean(date_counter$freq)
globalenv()
shiny::runApp('webapps/test')
library(shiny)
runExample("01_hello")
runApp('webapps/test')
---
title: "RN_temp"
author: "CP"
date: "December 22, 2017"
output: html_document
---
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```
## R Markdown
This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see <http://rmarkdown.rstudio.com>.
When you click the **Knit** button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:
```{r cars}
summary(cars)
```
## Including Plots
You can also embed plots, for example:
```{r pressure, echo=FALSE}
plot(pressure)
```
Note that the `echo = FALSE` parameter was added to the code chunk to prevent printing of the R code that generated the plot.
library(markdown)
render("RN_temp.Rmd")
library(rmarkdown)
render("RN_temp.Rmd")
getwd()
ls
ls)()
ls()
render("markdown/RN_temp.Rmd")
render("markdown/RN_temp.Rmd")
render("markdown/RN_temp.Rmd")
render("markdown/RN_temp.Rmd")
render("markdown/RN_temp.Rmd")
?read_excel
render("markdown/RN_temp.Rmd")
render("markdown/RN_temp.Rmd")
render("markdown/RN_temp.Rmd")
png(file="mygraphic.png",width=400,height=350)
plot(date_counter, type="h")
dev.off()
plot(date_counter, type="h")
png(file="mygraphic.png",width=400,height=350)
plot(date_counter, type="h")
dev.off()
library(SDSFoundations)
install.packages("SDSFoundations")
library(SDSFoundations)
install.packages("F:/temp/SDSFoundations_1.3.zip", repos = NULL, type = "win.binary")
library(SDSFoundations)
bike <- BikeData
View(bike)
library(SDSFoundations)
bike <- BikeData
View(bike)
